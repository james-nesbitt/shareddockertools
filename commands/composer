#!/usr/bin/env bash
####
# Run PHP Composer in a devshell image
#
# @NOTE unlike other commands, this command does not just 
#   mount volumes from source, which allows this container
#   to run without having docker-compose run.
#
#     $/> wundertools composer update
#

# make sure that we have vendor path, or docker will create
# it, but it would be owned by the root user.
if [ ! -d "${PATH_APP}/vendor" ]; then
    echo "Project composer vendor path does not exist. Creating it now at ${PATH_APP}/vendor"
    mkdir "${PATH_APP}/vendor"
fi

CONTAINER_ARGS="$@"
#echo ">>>>>DOCKER:COMPOSER START [CMD: ${CONTAINER_ARGS}]
#"

docker run --rm -t -i \=
    --hostname=${PROJECT} \
    --volume="${PATH_APP}/web:/app/web" \
    --volume="${PATH_APP}/vendor:/app/vendor" \
    --volume="${PATH_APP}/scripts:/app/scripts" \
    --volume="${PATH_APP}/composer.json:/app/composer.json" \
    --volume="${PATH_HOME}/.gitconfig:/app/.gitconfig" \
    --volume="${PATH_HOME}/.ssh:/app/.ssh" \
    --entrypoint=composer \
    -w=/app \
    --name="${PROJECT}_composer" \
    --user=app \
    -e COMPOSER_PROCESS_TIMEOUT=600 \
    ${DOCKER_IMAGE_DEVELOPERTOOL} \
    --working-dir=/app \
    ${CONTAINER_ARGS}

#echo "
#<<<<<DOCKER:COMPOSER END "
