#!/usr/bin/env bash
###
# Initialise a new Drupal 8 project.
#
# This command does the following:
#   - Uses Composer to create a Drupal 8 project from drupal-composer/drupal-project.
#   - Copies into place the default wundertools.settings.inc and compose-default.yml file.
#

# Overwrite some the source path settings
SUBPATH_SOURCE="app"
PATH_SOURCE="${PATH_APP}/${SUBPATH_SOURCE}"

printf "Initialising new Drupal 8 project (drupal-composer/drupal-project) in ${PATH_SOURCE} ...\n"

# Do everything from the root path (don't do it inside the wundertools folder)
cd "${PATH_APP}"

# composer create-project of drupal in PATH_APP
"${PATH_WUNDERTOOLS}/wundertools" composer --pwd create-project drupal-composer/drupal-project:8.x-dev "${SUBPATH_SOURCE}" --stability dev --no-interaction

printf "Initialising default settings...\n"

# Copy the demo template settings to the project root (it has on a change for SUBPATH_SOURCE)
echo "--> creating new settings file from demo template"
cp "${PATH_WUNDERTOOLS}templates/demo/${WUNDERTOOLS_SETTINGS_FILENAME}" "${PATH_APP}/${WUNDERTOOLS_SETTINGS_FILENAME}"

# Instructions
echo "
------ INIT COMPLETE ------------

Drupal 8 has been built into the curent path, and
a new wundertools.settings.inc file has been added
which you can modify to alter your system.

Wundertools now expects your source code to be in
the /app path, next to the wundertools folder.

If you have a custom docker-compose.yml file, you
can add it the project root, next to the wundertools
folder.  If you want to create one, you can start
with the composer-default.yml file in the wundertools
folder, but try to remove the shell variables from it.

The initial composer actions have been run, so you
should be able to get started using:

    $/> wundertools up

"