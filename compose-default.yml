# WunderTools docker-compose
#
# This file is a standard docker-compose version 2 format file.
#
# Docker compose is used as a standard base in the wundertools idea
# because it is an industry standard format, used even by groups
# that don't use the docker supported python app.
# It is considered a safe approach for defining nodes from development
# to production.
#
# Note that version "2" offers some features that earlier version
# don't, but it seems that some tools don't yet support it (such as
# possible rancherOS)
#
#
# Because the goal of this file is to have something which can be
# used anywhere, even outside of this repo, the file should not 
# rely on any builds or bind volumes, as such elements would not
# work on a host, without access to the full wundertools set.
#
# - Any volume binds should be limited to overlaying local configuration
#   or source code on top of something that already exists in the image,
#   in order to get local access in development.
# - Any image builds should push directly to hosted images, which can 
#   be used in production.
#
####

####
# This file uses docker-compose version 2 syntax.  It doesn't really need 
# to though, so if this gives you problems, test it without the version
# and services lines.
version: "2"

####
# The following services are considered a part of this application
#
services:

  ####
  # SOURCE
  #
  # Create a container for source code 
  # [In production this should be an image with source code in the build]
  #
  # This container has a "CMD" but it never needs to run as it is used only as
  # a source of "volume" from which other containers get their source code.
  # When the service stars, it will exit with 0, which is expected.
  #
  # In development, we overlay the host code to get local file access, but in 
  # production we want an image that has source code built in.
  # 
  source:
    image: quay.io/wunder/wunder-alpine-base
    command:
      - /bin/true # this is an industry standard hack used with docker-compose
    volumes:
      # Here we overlay local source on top of where the built source code 
      # would be in a production ready source image.
      #
      # @NOTE we use an env variable to point to a sub-path, but this is not
      # recommended, as it creates a dependency on the host environment.  
      # consider creating a more formal layout instead.
      #
      - ${PATH_APP}/web:/app/web 
      - ${PATH_APP}/vendor:/app/vendor

  ####
  # DB node 
  #
  # Presents a standalone DB server with an open port
  #
  # This image has a defaul db already created.  If you'd like to have a custom
  # db and db credentials, comment out the "image:" line, and uncomment the 
  # build section, where you can set credentials.
  #
  # by default: mysql://app:app@db.app/app
  #   where db.app is define in fpm: links: below
  #
  db: 
    #image: quay.io/wunder/alpine-mariadb
    image: quay.io/wunder/wundertools-image-fuzzy-mariadb

    ####
    # IMAGE BUILD OVERRIDES
    #
    # If you want custom credentials, consider commenting out the 
    # db: "image:" line, and uncommenting this.  It will give you a custom
    # db image for your app, with credentials as suggested below.
    # The default values are show.
    #
    #build:
    #  context: ./images/james/alpine-mariadb-app
    #  args: # arguments used only during build
    #    MYSQL_ROOT_PASSWORD: root
    #    MYSQL_USER: app
    #    MYSQL_PASSWORD: app
    #    MYSQL_DATABASE: app 

  ####
  # MemCacheD
  #
  # A running memcacheD service, that the fpm container links to.
  # The fpm container has a settings: links: memcache:memcached.app
  # which makes this container available at URL "memcache.app"
  #
  memcache:
    image: quay.io/wunder/alpine-memcached

  ####
  # FPM node
  #
  # presents a standalone PHP-FPM service which accepts tcp connections.  It links
  # to the DB using the URL db.app and pulls source code form the source node volumes
  #
  fpm:
    #image: quay.io/wunder/alpine-php-app
    image: quay.io/wunder/wundertools-image-fuzzy-php
    volumes_from:
      - source  # FPM gets source code from the source container (should be ReadOnly)
    links:
      - db:db.app # fpm sees the db container at URL "db.app"
      - memcache:memcached.app # fpm sees the memcached container at URL "memcached.app"

  ####
  # WWW node
  #
  # Either an nginx or apache server that receives https requests, and if needed 
  # hands off to fpm using the url fpm.app.  This service gets only read access to 
  # volumes from the source container.
  #
  # There is an ENV variable here, that would configure DNSDOCK to use a specific URL
  # if you have DNSDOCK set up.  If you aren't using DNSDOCK then it does nothing.
  #
  # You can reach this container: http://localhost:8081
  # (as configured in the ports section)
  #
  www:
    #image: quay.io/wunder/alpine-nginx-pagespeed-app
    image: quay.io/wunder/wundertools-image-fuzzy-nginx
    environment:
      # If you are using DNSDOCK, this will assign a local DNS entry
      DNSDOCK_ALIAS: www.wunderdemo.docker
    volumes_from:
      - source:ro # www gets source code from the source container AS READ ONLY
    links:
      # map the fpm container to URL "fpm.app"
      - fpm:fpm.app
    ports:
      # currently portmapping port 80 to the host 8081
      - "8081:80"

  ####
  # Static cache service
  #
  # This container passes off to the www container, as configured using
  # the env variable and link.  www is available at the url backend.app
  # inside the container.
  #
  # You can reach this container: http://localhost:8080
  # (as configured in the ports section)
  #
  varnish:
    image: quay.io/wunder/alpine-varnish
    environment:
      # If you are using DNSDOCK, this will assign a local DNS entry
      DNSDOCK_ALIAS: varnish.wunderdemo.docker
      # this is an image variable, which is used to configure the varnish vcl
      VARNISH_BACKEND_HOST: backend.app
    links:
      # map the www container to URL backend.app
      - www:backend.app
    ports:
      # currently portmapping port 80 to the host 8080
      - "8080:80"
